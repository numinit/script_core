# frozen_string_literal: true

require("pathname")
require_relative("./flags")

MRUBY_DIR = Pathname.new(__dir__).join("mruby")
raise(<<-MESSAGE) unless Dir.exist?(MRUBY_DIR.join("src"))

  The mruby source code appears to be missing. Did you clone this gem with
  submodules? If that is not the case or you are unsure, you can run the
  following commands:

    $ git submodule init
    $ git submodule update

MESSAGE

ESS_ROOT = Pathname.new(__dir__).join("../..")
ROOT =
  if ENV["TARGET_DIR"] && File.directory?(ENV["TARGET_DIR"])
    Pathname.new(ENV["TARGET_DIR"])
  elsif ENV["INSTALL_DIR"] && File.directory?(ENV["INSTALL_DIR"])
    Pathname.new(ENV["INSTALL_DIR"])
  else
    ESS_ROOT
  end
SERVICE_EXECUTABLE_DIR = ROOT.join("bin")
SERVICE_EXECUTABLE = SERVICE_EXECUTABLE_DIR.join("enterprise_script_service").to_s
SERVICE_SOURCES = Dir.glob("*.cpp").map(&:to_s)
Dir.chdir("#{ESS_ROOT}/tests") do
  test_filenames = Dir.glob("*_test.cpp")

  # TODO: Remove when integration test fixtures supports mruby 2.0
  puts "Because fixtures are not compatible with mruby 2.0, skip integration tests for now"
  test_filenames -= ["integration_test.cpp"]

  SERVICE_TESTS = test_filenames.map { |f| "#{Dir.pwd}/#{f}" }
  GOOGLE_TEST_DIR = "#{Dir.pwd}/googletest/googletest"
  SERVICE_TESTS << "#{GOOGLE_TEST_DIR}/src/gtest-all.cc"
  SERVICE_TESTS << "#{GOOGLE_TEST_DIR}/src/gtest_main.cc"
  SERVICE_TESTS_EXECUTABLE = SERVICE_EXECUTABLE_DIR.join("enterprise_script_service_tests").to_s
end

MRUBY_BIN_DIR = MRUBY_DIR.join("build/host/mrbc/bin")
MRBC_EXE = MRUBY_BIN_DIR.join("mrbc")

MRUBY_LIB_DIR = MRUBY_DIR.join("build/sandbox/lib")
MRUBY_LIB = MRUBY_LIB_DIR.join("libmruby.a")

LIBSECCOMP_DIR = Pathname.new(__dir__).join("libseccomp")
LIBSECCOMP_LIB_DIR = LIBSECCOMP_DIR.join("src/.libs")

CXX = ENV["CXX"] || "g++"

LIBSECCOMP_CFLAGS = if RUBY_PLATFORM.match?(/linux/)
  [
    "-Ilibseccomp/include",
    "-L#{LIBSECCOMP_LIB_DIR}",
    "-lseccomp"
  ].freeze
else
  [].freeze
end

directory(SERVICE_EXECUTABLE_DIR)

file(SERVICE_EXECUTABLE => [
       SERVICE_EXECUTABLE_DIR,
       *SERVICE_SOURCES,
       __FILE__,
       MRUBY_LIB
     ]) do
  sh(
    CXX,
    "--std=c++11",
    "-Wall",
    "-Wextra",
    "-DMSGPACK_NO_BOOST",
    "-Imsgpack/include",
    "-Imruby/include",
    "-L#{MRUBY_LIB_DIR}",
    *Flags.cflags,
    *Flags.defines.map { |define| "-D#{define}" },
    "-o", SERVICE_EXECUTABLE,
    *SERVICE_SOURCES,
    "-lmruby",
    *LIBSECCOMP_CFLAGS
  )

  sh("cp", MRBC_EXE.to_s, SERVICE_EXECUTABLE_DIR.to_s)
end

SERVICE_SOURCES_NO_MAIN = SERVICE_SOURCES.reject { |f| f == "ext.cpp" }

file(SERVICE_TESTS_EXECUTABLE => [
       SERVICE_EXECUTABLE_DIR,
       *SERVICE_SOURCES_NO_MAIN,
       *SERVICE_TESTS,
       __FILE__,
       MRUBY_LIB
     ]) do
  sh(
    CXX,
    "--std=c++11",
    "-Wall",
    "-Wextra",
    "-DMSGPACK_NO_BOOST",
    "-Imsgpack/include",
    "-Imruby/include",
    "-I#{GOOGLE_TEST_DIR}/include",
    "-I#{GOOGLE_TEST_DIR}",
    "-I.",
    "-L#{MRUBY_LIB_DIR}",
    *Flags.cflags,
    *Flags.defines.map { |define| "-D#{define}" },
    "-o", SERVICE_TESTS_EXECUTABLE,
    *SERVICE_SOURCES_NO_MAIN,
    *SERVICE_TESTS,
    "-lmruby",
    "-lpthread",
    *LIBSECCOMP_CFLAGS
  )
end

file(MRUBY_LIB => %i[mruby:compile libseccomp:compile])

task(clean: %i[mruby:mrproper libseccomp:mrproper]) do
  sh("rm", SERVICE_EXECUTABLE)
end

task(mrproper: %i[clean mruby:mrproper libseccomp:mrproper])

task(default: [SERVICE_EXECUTABLE, :test])

task(test: [SERVICE_TESTS_EXECUTABLE]) do
  sh(SERVICE_TESTS_EXECUTABLE)
end

namespace(:mruby) do
  def within_mruby
    Dir.chdir(MRUBY_DIR) do
      original_mruby_config = ENV["MRUBY_CONFIG"]
      begin
        ENV["MRUBY_CONFIG"] = "../mruby_config.rb"
        yield
      ensure
        ENV["MRUBY_CONFIG"] = original_mruby_config
      end
    end
  end

  # Workaround because it may compiling fail when changing gembox
  task(compile: :clean) do
    within_mruby do
      sh("ruby", "./minirake")
    end
  end

  task(:clean) do
    within_mruby do
      sh("rm", "../mruby_config.rb.lock") if File.exist?("../mruby_config.rb.lock")
      sh("ruby", "./minirake", "clean")
    end
  end

  task(:mrproper) do
    within_mruby do
      sh("ruby", "./minirake", "deep_clean")
    end
  end
end

namespace(:libseccomp) do
  def within_libseccomp
    return unless RUBY_PLATFORM.match?(/linux/)

    Dir.chdir(LIBSECCOMP_DIR) do
      yield
    end
  end

  task(:compile) do
    within_libseccomp do
      sh("./autogen.sh") unless File.exist?(LIBSECCOMP_DIR.join("configure"))
      sh("./configure", "--enable-shared=no") unless File.exist?(LIBSECCOMP_DIR.join("Makefile"))
      sh("make")
    end
  end

  task(:clean) do
    within_libseccomp do
      sh("make", "clean")
    end
  end

  task(:mrproper) do
    within_libseccomp do
      sh("make", "distclean")
    end
  end
end
